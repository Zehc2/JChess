package com.chess.engine.board.copy;

import com.chess.engine.pieces.Piece;
import java.util.HashMap;

import java.util.Map;


public abstract class Tile {
	
	protected final int tileCoordinate; 
	//creates all the tiles with a map
	private static final Map<Integer, EmptyTile> EMPTY_TILE_CACHE = createAllPossibleEmptyTiles();
	
	public int getTileCoordinate() {
		return this.tileCoordinate;
	}
	
	
	private Tile(int tileCoordinate)  {
		this.tileCoordinate = tileCoordinate; 
	}
	//creates all empty tiles
	private static Map<Integer, EmptyTile> createAllPossibleEmptyTiles() {
		Map<Integer, EmptyTile> emptyTileMap = new HashMap<>();
			for(int i = 0; i < BoardUtils.NUM_TILES; i++) {
			emptyTileMap.put(i,  new EmptyTile(i));
			}
			// THIS COULD BE WRONG RETURN TO IT 
			return emptyTileMap;
			}
			public static Tile createTile(final int tileCoordinate, final Piece piece) {
				return piece != null ? new OccupiedTile(tileCoordinate, piece) : EMPTY_TILE_CACHE.get(tileCoordinate);
				} 
		public abstract boolean isTileOccupied(); 
		public abstract Piece getPiece();  
		// creates inner class EmptyTile
			public static final class EmptyTile extends Tile {
				
		private EmptyTile(final int coordinate) {
			super(coordinate);
		}
		@Override 
		public String toString() {
			return "-";
			
		}
		@Override 
		public boolean isTileOccupied() {
			return false;
		}
		@Override 
		public Piece getPiece() {
			return null;
		}
		
	}
			// inner class for occupied Tile
			public static final class OccupiedTile extends Tile {
		private final Piece pieceOnTile; 
		
		// creates OccupiedTile
		private OccupiedTile(int tileCoordinate, final Piece pieceOnTile) {
			super(tileCoordinate);
			this.pieceOnTile = pieceOnTile; 
		} 
		@Override
		public String toString() {
			return getPiece().getPieceAlliance().isBlack() ? getPiece().toString().toLowerCase() : getPiece().toString();
		}
		@Override 
		public boolean isTileOccupied() {
			return true; 
		}
		@Override
		public Piece getPiece() {
			return this.pieceOnTile;
		}
		
	}
}