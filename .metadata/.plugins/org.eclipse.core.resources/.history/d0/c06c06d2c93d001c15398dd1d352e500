package com.chess.engine.board;

import com.chess.engine.board.Board.Builder;
import com.chess.engine.pieces.Pawn;
import com.chess.engine.pieces.Piece;
import com.chess.engine.pieces.Rook;


public abstract class Move {
	
	
	final Board board;
	final Piece movedPiece; 
	final int destinationCoordinate;
	
	public static final Move NULL_MOVE = new NullMove();
	
	// Move class constructor, private!!
	private Move(final Board board,
		 final Piece movedPiece, 
		 final int destinationCoordinate) {
		
		this.board = board; 
		this.movedPiece = movedPiece; 
		this.destinationCoordinate = destinationCoordinate; 
	}
	
	//gets the moved piece new coordinate
	public int getCurrentCoordinate() {
		return this.getMovedPiece().getPiecePosition();
	}
	
	@Override
	
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		
		
		result = prime * result + this.getDestinationCoordinate();
		result = prime * result + this.movedPiece.hashCode();		
		return result;
	}
	
	/* @param other is converted into a Move called otherMove.
	 * @method getDestinationCoordinate is a Move class method that returns the destination coordinate.
	 * It returns if the two objects getDestinationCoordinate, and if they are the same movedPiece.
	 */

	@Override
	public boolean equals(final Object other) {
		if(this == other) return true;
		if(!(other instanceof Move)) return false;
		
		final Move otherMove = (Move) other;
		return getDestinationCoordinate() == otherMove.getDestinationCoordinate() &&
			   getMovedPiece().equals(otherMove.getMovedPiece());
		
		
	}
	
	//creates the getDestinationCoordinate
	public int getDestinationCoordinate() {
		return this.destinationCoordinate;
	}
	
	//gets the movedPiece
	public Piece getMovedPiece() {
		return this.movedPiece;
	}
	
	public boolean isAttacked() {
		return false;
	}
	
	public boolean isCastlingMove() {
		return false;
	}
	
	public Piece getAttackedPiece() {
		return null;
	}
	
	/*
	 * This method is used to create a new board.
	 * The purpose is so every time a piece is moved
	 * it creates a new board but with the 
	 * new tiles that the pieces are on. 
	 */
	public Board execute() {
		/*
		 * Board.Builder creates a map of the chess board.
		 * It creates a 64 map of tiles and keys. 
		 */
		final Board.Builder builder = new Builder();
		/*
		 * Gets every piece in the current players active pieces.
		 * Uses the equal method defined above to see if the movedPiece is
		 * equivalent to the new piece defined in the loop. If they are not 
		 * equivalent then it sets the piece on the new board to 
		 * the new piece made.
		 */
		
		for(final Piece piece : this.board.currentPlayer().getActivePieces()) {
			if(!this.movedPiece.equals(piece)) {
				builder.setPiece(piece);
			}
		}
		
		/*
		 * Same for loop as above but for opposing player
		 * does not use the movedPiece if condition because
		 * the opponent did not move a piece.
		 */
		for(final Piece piece : this.board.currentPlayer().getOpponent().getActivePieces()) {
			builder.setPiece(piece); 
		} 
		
		// Sets the movedPiece to a new tile on the new board
		builder.setPiece(this.movedPiece.movePiece(this));
		// It is now the opponents move
		builder.setMoveMaker(this.board.currentPlayer().getOpponent().getAlliance());
		
		
		return builder.build();
	}

	/*
	 * Inner class used for every time a major piece is moved.
	 */
	public static final class MajorMove extends Move {
		
		// constructor
		public MajorMove(final Board board, final Piece movedPiece, final int destinationCoordinate) {
			super(board, movedPiece, destinationCoordinate);
		}
	}
	
	/*
	 * Another class for every time a piece
	 * attacks another piece.
	 */
	public static class AttackMove extends Move {

		final Piece attackedPiece; 
		
		public AttackMove(final Board board, final Piece movedPiece, final int destinationCoordinate, final Piece attackedPiece) {
			super(board, movedPiece, destinationCoordinate);
			this.attackedPiece = attackedPiece; 
		}
		
		@Override 
		public int hashCode() {
			return this.attackedPiece.hashCode() + super.hashCode();
		}
		
		/*
		 * Overrides equal method.
		 * @param other is object that will be a AttackMove object
		 * @var otherAttackMove is equal to other but casted into a 
		 * AttackMove.
		 * @method getAttackedPiece() is a method that returns the Piece, attackedPiece.
		 *  Returns the otherAttackMove equals otherAttackMove.getAttackedPiece. 
		 */
		@Override
		public boolean equals(final Object other) {
			if(this == other) return true;
		
		if(!(other instanceof AttackMove)) return false;
		
		final AttackMove otherAttackMove = (AttackMove) other;
		return super.equals(otherAttackMove) && getAttackedPiece().equals(otherAttackMove.getAttackedPiece());
		}
		
		
		
		@Override
		public boolean isAttacked() {
			return true;
		}
		
		@Override
		public Piece getAttackedPiece() {
			return this.attackedPiece;
		}
	}
	
	// inner class used to make a pawn move
	public static final class PawnMove extends Move {
		public PawnMove(final Board board, 
				final Piece movedPiece, 
				final int destinationCoordinate) {
			super(board, movedPiece, destinationCoordinate);
		}
	}
	
	// inner class used to make a PawnAttackMove (seperate bc they move diag)
	public static class PawnAttackMove extends AttackMove {
		public PawnAttackMove(final Board board, 
				final Piece movedPiece, 
				final int destinationCoordinate, 
				final Piece attackedPiece)  {
			super(board, movedPiece, destinationCoordinate, attackedPiece);
		}
	}
	
	// inner class used to make a enPassant
	public static class PawnEnPassantAttackMove extends PawnAttackMove {
		public PawnEnPassantAttackMove(final Board board, 
				final Piece movedPiece, 
				final int destinationCoordinate, 
				final Piece attackedPiece)  {
			super(board, movedPiece, destinationCoordinate, attackedPiece);
		}
	}

	
	/* Inner class used when the pawn 
	 * needs to jump two sqaures on its first
	 * move.
	 */
	public static final class PawnJump extends Move {
		public PawnJump(final Board board, 
				final Piece movedPiece, 
				final int destinationCoordinate) {
			super(board, movedPiece, destinationCoordinate);
		}
		
		// Execute method but instead it moves the pawn two sqaures forward
		@Override
		public Board execute() {
			final Builder builder = new Builder();
			for(final Piece piece : this.board.currentPlayer().getActivePieces()) {
				if(!this.movedPiece.equals(piece)) {
					builder.setPiece(piece);
				}
			}
			for(final Piece piece : this.board.currentPlayer().getOpponent().getActivePieces()) {
				builder.setPiece(piece);
			}
			final Pawn movedPawn = (Pawn)this.movedPiece.movePiece(this);
			builder.setPiece(movedPawn);
			builder.setEnPassantPawn(movedPawn);
			builder.setMoveMaker(this.board.currentPlayer().getOpponent().getAlliance());
			return builder.build();
			
		}
	}
	
	static abstract class CastleMove extends Move {
	 
	 protected final Rook castleRook; 
	 protected final int castleRookStart;
	 protected final int castleRookDestination;
		
		public CastleMove(final Board board, 
					final Piece movedPiece, 
					final int destinationCoordinate,
					final Rook castleRook,
					final int castleRookStart,
					final int castleRookDestination
					) {
			super(board, movedPiece, destinationCoordinate);
			this.castleRook = castleRook;
			this.castleRookStart = castleRookStart;
			this.castleRookDestination = castleRookDestination;
		}
		
		public Rook getCastleRook() {
			return this.castleRook;
		}
		
		@Override
		public boolean isCastlingMove() {
			return true;
		}
		
		@Override 
		public Board execute() {
			final Builder builder = new Builder();
		for(final Piece piece : this.board.currentPlayer().getActivePieces()) {
			if(!this.movedPiece.equals(piece) && !this.castleRook.equals(piece)) {
				builder.setPiece(piece);
			}
		}
		for(final Piece piece : this.board.currentPlayer().getOpponent().getActivePieces()) {
			builder.setPiece(piece);
		}
		builder.setPiece(this.movedPiece.movePiece(this));
		//TODO look into first move normal pieces
		builder.setPiece(new Rook(this.castleRook.getPieceAlliance(), this.castleRookDestination));
		builder.setMoveMaker(this.board.currentPlayer().getOpponent().getAlliance());
		return builder.build();
	}
 }
 
 public static final class KingSideCastleMove extends CastleMove {
		public KingSideCastleMove(final Board board, 
					final Piece movedPiece, 
					final int destinationCoordinate,
					final Rook castleRook,
					final int castleRookStart,
					final int castleRookDestination) {
			super(board, movedPiece, destinationCoordinate, castleRook, castleRookStart, castleRookDestination);
		}
		
		@Override
		public String toString() {
			return "0-0";
		}
	}
	
 public static final class QueenSideCastleMove extends CastleMove {
		public QueenSideCastleMove(final Board board, 
					final Piece movedPiece, 
					final int destinationCoordinate,
					final Rook castleRook,
					final int castleRookStart,
					final int castleRookDestination) {
			super(board, movedPiece, destinationCoordinate, castleRook, castleRookStart, castleRookDestination);
		}
		
		@Override
		public String toString() {
			return "0-0";
		}
	}
 
 public static final class NullMove extends Move {
		public NullMove() {
			super(null, null, -1);
		}
		
		@Override
		public Board execute() {
			throw new RuntimeException("Can't execute null move!");
				
		}
	}
	
 public static class MoveFactory {
	 
	 private MoveFactory() {
		 throw new RuntimeException("Not instantiable!");
	 }
	 	public static Move createMove(final Board board,
	 								final int currentCoordinate,
	 								final int destinationCoordinate) {
	 		
	 		for(final Move move : board.getAllLegalMoves()) {
	 			if(move.getCurrentCoordinate() == currentCoordinate && move.getDestinationCoordinate() == destinationCoordinate) {
	 				return move;
	 			}
	 		}
	 		return NULL_MOVE;
	 		
	 	}
 	}
}
